package org.opennms.netmgt.correlation.ncs.external;

import function org.opennms.core.utils.InetAddressUtils.addr;
import function org.opennms.core.utils.InetAddressUtils.str;

import java.util.Date;
import java.net.InetAddress;
import java.util.List;


import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.correlation.ncs.*;
import org.opennms.netmgt.model.ncs.*;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.xml.event.Parms;
import org.opennms.netmgt.xml.event.Value;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.EventConstants;
import org.opennms.netmgt.capsd.EventUtils;
import org.drools.spi.KnowledgeHelper;

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.ncs.NCSCorrelationService correlationService;


rule "load dependencies"
	salience 10000
when
	Impacted( $c : target )
then
	NCSComponent c = $c;
	List<NCSComponent> list = correlationService.findComponentsThatDependOn( c.getId() );
	for ( NCSComponent parent : list ) {
		println( "Parent component '" + parent.getName() + "' depends on " + c.getName() );
		insert( new DependsOn( parent, c ) );
	}
end

rule "pseudo-wire component down"
	salience 100
when
	$e : Event( uei matches ".*jnxVpnPwDown" )
then
	List<NCSComponent> list = correlationService.findComponentsByNodeIdAndEventParameters($e, "jnxVpnPwType", "jnxVpnPwName");
	for ( NCSComponent c : list ) {
		println( "Component '" + c.getName() + "' is down!" );
		insert( new Impacted( c, $e ) );
		insert( new EventComponent( c, $e ) );
		sendImpactedComponentEvent( engine, c, $e );
	}
end


rule "pseudo-wire component up"
	salience 100
when
	$downEvent : Event( uei matches ".*jnxVpnPwDown", $downNodeId : nodeid, $downParms : parmCollection )
	Parm( parmName == "jnxVpnPwType", $downVpnPwTypeValue: value.content ) from $downParms
	Parm( parmName == "jnxVpnPwName", $downVpnPwNameValue: value.content ) from $downParms
	$upEvent : Event( uei matches ".*jnxVpnPwUp", nodeid == $downNodeId, $upParms : parmCollection )
	Parm( parmName == "jnxVpnPwType", value.content == $downVpnPwTypeValue ) from $upParms
	Parm( parmName == "jnxVpnPwName", value.content == $downVpnPwNameValue ) from $upParms
	$eventComponent: EventComponent ( $c : component, event == $downEvent )
	$impacted : Impacted( target == $c, cause == $downEvent )
then
	retract( $downEvent );
	retract( $upEvent );
	retract( $eventComponent );
	insert( new Resolved( $downEvent, $upEvent ) );
	println( "Resolved down event " + $downEvent );
	println( "component up with " + $downVpnPwTypeValue + "_" + $downVpnPwNameValue );
end

rule "resolved component"
	salience 400
when
	$i : Impacted( $c : target, $cause : cause )
	$r : Resolved( cause == $cause )
then
	println( " Resolving Impact " + $i );
	retract( $i ); 
	sendResolvedComponentEvent(engine, $c, $cause);
end

/*
rule "service up"
	salience 100
when
	$downEvent : Event( uei matches ".*nodeLostService", $nodeid : nodeid, $addr : interfaceAddress, $svc : service == "ICMP" )
	$upEvent : Event( uei matches ".*nodeRegainedService", nodeid ==  $nodeid, interfaceAddress == $addr, service == $svc )
	$s : Service( node == $nodeid, addr == $addr, svc == $svc )
	$impacted : Impacted( target == $s, cause == $downEvent )
then
	retract( $downEvent );
	retract( $upEvent );
	retract( $impacted );
	insert( new Resolved( $downEvent, $upEvent ) );
	println( "Resolved down event " + $downEvent );
end
*/

rule "impacted parent component"
	salience 400
when
	$i : Impacted( $b : target, $e : cause )
	DependsOn( $a : a, b == $b )
then
	println( "Component " + $a.getName() + " depends on impacted component " + $b.getName() + " with cause " + $e.getUei()  + " with id " + $e.getDbid() );
	insert( new Impacted( $a, $e ) );
	sendImpactedComponentEvent( engine, $a, $e );
end	


/*
rule "resolved service"
	salience 400
when
	$s : Service()
	$i : Impacted( target == $s, $cause : cause )
	$r : Resolved( cause == $cause )
then
	println( " Resolving Impact " + $i );
	retract( $i ); 
	sendResolvedServiceEvent(engine, $s, $cause);
end
*/

/*
rule "clean up resolutions"
when
	$r : Resolved( $c : cause )
	not( Impacted( cause == $c ) )
then
	println( "Cleanup up resolve " + $r );
	retract( $r );
end
*/

function void println(Object msg)
{
	System.err.println(new Date() + " : " + msg);
}


function void sendImpactedComponentEvent( DroolsCorrelationEngine engine, NCSComponent c, Event e )
{
	EventBuilder bldr = new EventBuilder( "uei.opennms.org/internal/ncs/componentImpacted", "Drools" );
	bldr.addParam("componentType", c.getType() );
	bldr.addParam("componentForeignSource", c.getForeignSource() );
	bldr.addParam("componentForeignId", c.getForeignId() );
	bldr.addParam("CAUSE", e.getDbid() );
	engine.sendEvent(bldr.getEvent());
}


function void sendResolvedComponentEvent( DroolsCorrelationEngine engine, NCSComponent c, Event e)
{
	EventBuilder bldr = new EventBuilder( "uei.opennms.org/internal/ncs/componentResolved", "Drools" );
	bldr.addParam("componentType", c.getType() );
	bldr.addParam("componentForeignSource", c.getForeignSource() );
	bldr.addParam("componentForeignId", c.getForeignId() );
	bldr.addParam("CAUSE", e.getDbid() );
	engine.sendEvent(bldr.getEvent());
}



